2095. Delete the Middle Node of a Linked List

You are given the head of a linked list. Delete the middle node, and return the head of the modified linked list.

The middle node of a linked list of size n is the ⌊n / 2⌋th node from the start using 0-based indexing, where ⌊x⌋ denotes the largest integer less than or equal to x.

For n = 1, 2, 3, 4, and 5, the middle nodes are 0, 1, 1, 2, and 2, respectively.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteMiddle(ListNode* head) {
        int count=0;
        ListNode *temp=head;
        ListNode *temp1=NULL;
        if(head->next==NULL)
        {
            return NULL;
        }
        while(temp->next!=NULL)
        {
            count+=1;
            temp=temp->next;
        }
        count+=1;
        int half=count/2;
        temp=head;
        for(int i=0;i<half;i++)
        {
            temp1=temp;
            temp=temp->next;
            
        }
        temp1->next=temp->next;
        
        return head;
    }
};
