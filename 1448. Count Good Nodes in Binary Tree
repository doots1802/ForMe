1448. Count Good Nodes in Binary Tree

Given a binary tree root, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.

Return the number of good nodes in the binary tree.

Input: root = [3,1,4,3,null,1,5]
Output: 4
Explanation: Nodes in blue are good.
Root Node (3) is always a good node.
Node 4 -> (3,4) is the maximum value in the path starting from the root.
Node 5 -> (3,4,5) is the maximum value in the path
Node 3 -> (3,1,3) is the maximum value in the path.

//method-1 works for half of the text cases but fails when 9,null,3,6
class Solution {
public:
    int count=1;
    int goodNodes(TreeNode* root) {
        if(root==NULL)
        {
            return 0;
        }
        if(root->right==NULL && root->left==NULL)
        {
            return 1;
        }
        if (root->left != nullptr) {
            if (root->val <= root->left->val) {
                count += 1;
               
            }
        }
        if (root->right != nullptr) {
            if (root->val <= root->right->val) {
                count += 1;
                
            }
        }
        goodNodes(root->left);
        goodNodes(root->right);
        return count;
    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int solve(TreeNode* root, int &count, int prev) {
        if (root == NULL) {
            return count;
        }
        
        if (root->val >= prev) {
            count++;
        }
        
        // Update prev based on the current node's value
        prev = max(prev,root->val);
        
        solve(root->left, count, prev);
        solve(root->right, count, prev);
        
        return count;
    }
    
    int goodNodes(TreeNode* root) {
        int count = 0, prev = root->val; // Initialize prev with the root's value.
        return solve(root, count, prev);
    }
};
